// Generated by CoffeeScript 1.10.0
(function() {
  window.Command = (function() {
    Command.prototype.el = "#context-menu";

    function Command(world, start, end, mouse_x, mouse_y) {
      this.world = world;
      this.start = start;
      this.end = end;
      this.mouse_x = mouse_x;
      this.mouse_y = mouse_y;
      this.render();
      this.bind();
    }

    Command.prototype.events = {
      "click a.action-select-task": function(event) {
        var i, index, j, ref, ref1, ref2, ref3, selected_task_type, x, y;
        index = $(event.target).attr("data-index");
        selected_task_type = window.TASK_TYPES[index];
        for (x = i = ref = this.start.x, ref1 = this.end.x; ref <= ref1 ? i <= ref1 : i >= ref1; x = ref <= ref1 ? ++i : --i) {
          for (y = j = ref2 = this.start.y, ref3 = this.end.y; ref2 <= ref3 ? j <= ref3 : j >= ref3; y = ref2 <= ref3 ? ++j : --j) {
            this.world.add_task(new selected_task_type.task(this.world, x, y, selected_task_type.options));
          }
        }
        return this.close();
      },
      "click a.action-clear-task": function(event) {
        var i, index, j, ref, ref1, ref2, ref3, selected_task_type, x, y;
        index = $(event.target).attr("data-index");
        selected_task_type = window.TASK_TYPES[index];
        for (x = i = ref = this.start.x, ref1 = this.end.x; ref <= ref1 ? i <= ref1 : i >= ref1; x = ref <= ref1 ? ++i : --i) {
          for (y = j = ref2 = this.start.y, ref3 = this.end.y; ref2 <= ref3 ? j <= ref3 : j >= ref3; y = ref2 <= ref3 ? ++j : --j) {
            this.world.remove_task_on(x, y);
          }
        }
        return this.close();
      },
      "click a.action-close": function(event) {
        return this.close();
      }
    };

    Command.prototype.close = function() {
      this.unbind();
      return $(this.el).hide();
    };

    Command.prototype.bind = function() {
      return $.each(this.events, (function(_this) {
        return function(event, callback) {
          var element, event_type, ref;
          ref = event.split(" "), event_type = ref[0], element = ref[1];
          return $(_this.el).on(event_type, element, function(event) {
            event.preventDefault();
            return callback.call(_this, event);
          });
        };
      })(this));
    };

    Command.prototype.unbind = function() {
      var _, ref, results, selector;
      ref = this.events;
      results = [];
      for (selector in ref) {
        _ = ref[selector];
        results.push($(this.el).unbind(selector));
      }
      return results;
    };

    Command.prototype.render = function() {
      return window.template_loader.get("ui/task/set.html", (function(_this) {
        return function(template) {
          $(_this.el).html(template({
            task_types: window.TASK_TYPES
          }));
          $(_this.el).css("top", _this.mouse_y - 100);
          $(_this.el).css("left", _this.mouse_x);
          return $(_this.el).show();
        };
      })(this));
    };

    return Command;

  })();

}).call(this);

//# sourceMappingURL=command.js.map
