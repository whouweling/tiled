// Generated by CoffeeScript 1.9.2
(function() {
  var COMMAND;

  COMMAND = {
    gather: 1,
    build: 2
  };

  window.Control = (function() {
    Control.prototype.cursor_x = 1;

    Control.prototype.cursor_y = 1;

    Control.prototype.command = COMMAND.gather;

    Control.prototype.select = false;

    function Control(world, content, renderer) {
      this.world = world;
      this.content = content;
      this.renderer = renderer;
    }

    Control.prototype.translate = function(cursor_x, cursor_y) {
      var tile_height, tile_width, x, y;
      tile_width = this.renderer.tile_width;
      tile_height = this.renderer.tile_height;
      x = ((cursor_x - this.renderer.offset_x) * .25) - 10;
      y = ((cursor_y - this.renderer.offset_y) - 100) * this.renderer.zoom;
      return {
        x: Math.round((x / tile_height) + (y / tile_width)),
        y: Math.round((y / tile_width) - (x / tile_height))
      };
    };

    Control.prototype.show_cursor = function(x, y) {
      var height, ix, iy, tile_height, tile_width;
      tile_width = this.renderer.tile_width;
      tile_height = this.renderer.tile_height;
      ix = x * tile_width - (y * tile_width);
      iy = y * tile_height + (x * tile_height);
      height = this.world.map[x][y].get_vertical_offset();
      return this.renderer.draw_tile(this.cursor_context, 0, ix, iy, height);
    };

    Control.prototype.init = function() {
      var control_surface, cursor_canvas;
      control_surface = document.getElementById("fx");
      cursor_canvas = document.getElementById("cursor");
      this.cursor_context = cursor_canvas.getContext("2d");
      $(control_surface).mousemove((function(_this) {
        return function(event) {
          var cursor, i, ref, ref1, results, x, y;
          _this.cursor_context.clearRect(0, 0, 2000, 2000);
          cursor = _this.translate(event.offsetX, event.offsetY);
          if (_this.select) {
            results = [];
            for (x = i = ref = _this.select.x, ref1 = cursor.x; ref <= ref1 ? i <= ref1 : i >= ref1; x = ref <= ref1 ? ++i : --i) {
              results.push((function() {
                var j, ref2, ref3, results1;
                results1 = [];
                for (y = j = ref2 = this.select.y, ref3 = cursor.y; ref2 <= ref3 ? j <= ref3 : j >= ref3; y = ref2 <= ref3 ? ++j : --j) {
                  results1.push(this.show_cursor(x, y));
                }
                return results1;
              }).call(_this));
            }
            return results;
          } else {
            return _this.show_cursor(cursor.x, cursor.y);
          }
        };
      })(this));
      $(control_surface).mousedown((function(_this) {
        return function(event) {
          return _this.select = _this.translate(event.offsetX, event.offsetY);
        };
      })(this));
      return $(control_surface).mouseup((function(_this) {
        return function(event) {
          var cursor, end, mouse_x, mouse_y, start;
          cursor = _this.translate(event.offsetX, event.offsetY);
          if (_this.select) {
            start = _this.select;
            end = cursor;
          } else {
            start = cursor;
            end = cursor;
          }
          new window.Command(_this.world, start, end, mouse_x = event.pageX, mouse_y = event.pageY);
          return _this.select = null;
        };
      })(this));
    };

    return Control;

  })();

}).call(this);

//# sourceMappingURL=control.js.map
