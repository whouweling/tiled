// Generated by CoffeeScript 1.9.2
(function() {
  window.Render = (function() {
    Render.prototype.offset_x = 1000;

    Render.prototype.offset_y = 0;

    function Render(world, content) {
      this.world = world;
      this.content = content;
      this.tile_width = 36;
      this.tile_height = this.tile_width / 2;
      this.height_multiplier = 14;
      this.el_width = 73;
      this.el_height = 146;
      this.zoom = 1;
      this.map_context = document.getElementById("map").getContext("2d");
      this.items_context = document.getElementById("items").getContext("2d");
      this.fx_context = document.getElementById("fx").getContext("2d");
    }

    Render.prototype.update = function() {
      this.tiles_resource = this.content.images.tiles;
      this.update_map();
      return this.update_fx();
    };

    Render.prototype.update_fx = function() {
      var effect, height, i, ix, iy, len, ref, results, tile;
      return;
      this.fx_context.clearRect(0, 0, 2000, 2000);
      ref = window.effects;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        effect = ref[i];
        if (!effect) {
          continue;
        }
        effect.run();
        ix = effect.x * this.tile_width - (effect.y * this.tile_width);
        iy = effect.y * this.tile_height + (effect.x * this.tile_height);
        height = this.world.map[effect.x][effect.y].get_vertical_offset();
        tile = this.content.sprites[effect.tile][1];
        results.push(this.fx_context.drawImage(tile, ix + this.offset_x, (iy + this.offset_y - height * 3 - 10) + effect.offset_y));
      }
      return results;
    };

    Render.prototype.draw_tile = function(context, tile, x, y, height, light) {
      if (light < 1) {
        light = 1;
      }
      if (light > 10) {
        light = 10;
      }
      if (!light) {
        light = 1;
      }
      return context.drawImage(this.tiles_resource[light], tile * this.el_width, 0, this.el_width, this.el_height, (x * this.zoom) + this.offset_x, (y * this.zoom) + this.offset_y - (height * this.zoom) * this.height_multiplier, this.el_width * this.zoom, this.el_height * this.zoom);
    };

    Render.prototype.update_map = function() {
      var height, i, ix, iy, light, ref, results, tile, x, y;
      this.map_context.clearRect(0, 0, 2000, 2000);
      results = [];
      for (x = i = 1, ref = this.world.width; 1 <= ref ? i <= ref : i >= ref; x = 1 <= ref ? ++i : --i) {
        results.push((function() {
          var j, ref1, results1;
          results1 = [];
          for (y = j = 1, ref1 = this.world.height; 1 <= ref1 ? j <= ref1 : j >= ref1; y = 1 <= ref1 ? ++j : --j) {
            tile = this.world.map[x][y].tile;
            height = this.world.map[x][y].get_vertical_offset();
            if (this.world.map[x][y].height < this.world.water_level) {
              height = 0;
            }
            ix = x * this.tile_width - (y * this.tile_width);
            iy = y * this.tile_height + (x * this.tile_height);
            light = this.world.light[x][y];
            this.draw_tile(this.map_context, tile, ix, iy, height, light);
            this.map_context.fillStyle = '#ccc';
            if (this.world.task[x][y]) {
              if (!this.world.items[x][y]) {
                this.map_context.fillText(this.world.task[x][y].abbr, ix + this.offset_x + 17, (iy + this.offset_y - height * 3) + 85);
              }
            }
            if (this.world.items[x][y]) {
              tile = this.world.items[x][y].get_tile();
              this.draw_tile(this.map_context, tile, ix, iy, height, light);
              if (this.world.items[x][y].count > 1) {
                this.map_context.fillText(this.world.items[x][y].count, ix + this.offset_x + 17, (iy + this.offset_y - height * 3) + 85);
              }
            }
            if (this.world.actors[x][y]) {
              tile = this.world.actors[x][y].get_tile();
              this.draw_tile(this.map_context, tile, ix, iy, height, light);
              if (this.world.actors[x][y].carry) {
                tile = this.world.actors[x][y].carry.get_tile();
                results1.push(this.draw_tile(this.map_context, tile, ix, iy, height + 1, light));
              } else {
                results1.push(void 0);
              }
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    return Render;

  })();

}).call(this);

//# sourceMappingURL=render.js.map
