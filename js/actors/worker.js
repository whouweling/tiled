// Generated by CoffeeScript 1.9.2
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.Worker = (function(superClass) {
    extend(Worker, superClass);

    function Worker() {
      return Worker.__super__.constructor.apply(this, arguments);
    }

    Worker.prototype.home = null;

    Worker.prototype.hunger = 0;

    Worker.prototype.sleep = 0;

    Worker.prototype.start = function(task) {
      task.assigned = this;
      this.tasks.unshift(task);
      return console.debug("Worker " + this.id + " starts on task " + task.id + " (" + task.abbr + ")");
    };

    Worker.prototype.invalidate = function() {
      var i, len, ref, task;
      ref = this.tasks;
      for (i = 0, len = ref.length; i < len; i++) {
        task = ref[i];
        task.assigned = null;
      }
      return this.tasks = [];
    };

    Worker.prototype.get_tile = function() {
      return 7;
    };

    Worker.prototype.act = function() {
      var drop_location, result, target_x, target_y, task;
      Worker.__super__.act.call(this);
      if ((this.x !== this.target_x || this.y !== this.target_y) && this.world.reachable(this.target_x, this.target_y)) {
        this.move();
        return;
      }
      if (!this.tasks.length && this.carry) {
        if (this.world.items[this.x][this.y] !== null) {
          drop_location = this.world.find_free_spot(this.x, this.y);
          this.target_x = drop_location.x;
          this.target_y = drop_location.y;
        }
        if (this.world.items[this.x][this.y] === null) {
          this.drop();
        }
        return;
      }
      if (this.tasks.length === 0) {
        if (parseInt(Math.random() * 50, 10) === 1) {
          target_x = this.target_x + parseInt(Math.random() * 10 - 5, 10);
          target_y = this.target_y + parseInt(Math.random() * 10 - 5, 10);
          if (this.world.reachable(target_x, target_y)) {
            this.target_x = target_x;
            this.target_y = target_y;
          }
        }
        return;
      }
      task = this.tasks[0];
      result = task.execute();
      if (result instanceof window.Task) {
        this.start(result);
      }
      if (!result) {
        console.debug("Worker " + this.id + " completed task " + task.id + " (" + task.abbr + ")");
        task.assigned = null;
        this.tasks.shift();
      } else {
        if (task.working) {
          if (parseInt(Math.random() * 5, 10) === 1) {
            if (task instanceof window.GatherTask) {
              new window.IndicatorEffect("smoke", this.x, this.y);
            }
            if (task instanceof window.BuildTask) {
              new window.IndicatorEffect("work", this.x, this.y);
            }
            if (task instanceof window.ConsumeTask) {
              new window.IndicatorEffect("eat", this.x, this.y);
            }
            if (task instanceof window.RestTask) {
              return new window.IndicatorEffect("sleep", this.x, this.y);
            }
          }
        }
      }
    };

    Worker.prototype.furfill_needs = function() {
      if (this.hunger > 500 && this.world.find_item(this.x, this.y, window.Food, null)) {
        this.start(new ConsumeTask(this.world, this.x, this.y, {
          work: 20,
          abbr: "E"
        }));
      }
      if (this.sleep > 500 && this.world.find_item(this.x, this.y, window.Bed, null)) {
        return this.start(new RestTask(this.world, this.x, this.y, {
          work: 150,
          abbr: "E"
        }));
      }
    };

    return Worker;

  })(window.Actor);

}).call(this);

//# sourceMappingURL=worker.js.map
