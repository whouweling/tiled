// Generated by CoffeeScript 1.9.2
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.BuildTask = (function(superClass) {
    extend(BuildTask, superClass);

    BuildTask.prototype.get_tile = function() {
      if (this.material_at_build) {
        return "construction";
      } else {
        return "command";
      }
    };

    function BuildTask(world, x, y, options) {
      BuildTask.__super__.constructor.call(this, world, x, y, options);
      this.materials = {};
      this.material_at_build = false;
    }

    BuildTask.prototype.is_executable = function() {
      var index, need, ref;
      if (this.world.items[this.x][this.y]) {
        return false;
      }
      ref = this.options.needs;
      for (index in ref) {
        need = ref[index];
        if (!need.count) {
          continue;
        }
        if (!this.materials[index]) {
          this.materials[index] = 0;
        }
        if (this.materials[index] < need.count) {
          if (!this.world.find_item(this.x, this.y, need.material, null)) {
            return false;
          }
        }
      }
      return true;
    };

    BuildTask.prototype.execute = function() {
      var index, material_at_location, need, ref, ref1;
      if (this.world.items[this.x][this.y]) {
        material_at_location = this.world.items[this.x][this.y];
        ref = this.options.needs;
        for (index in ref) {
          need = ref[index];
          if (!need.count) {
            continue;
          }
          if (material_at_location instanceof need.material) {
            this.materials[index] = this.materials[index] + 1;
          }
        }
        this.world.remove_item(material_at_location);
        this.material_at_build = true;
      }
      ref1 = this.options.needs;
      for (index in ref1) {
        need = ref1[index];
        if (this.materials[index] < need.count) {
          if (this.world.find_item(this.x, this.y, need.material, null)) {
            return new window.Fetch(this.world, this.x, this.y, need.material, null);
          }
        }
      }
      if (this.do_work()) {
        console.log("Doing work ...");
        return true;
      }
      this.world.add_item(new this.options.result(this.world, this.x, this.y));
      return false;
    };

    return BuildTask;

  })(window.Task);

}).call(this);

//# sourceMappingURL=build.js.map
