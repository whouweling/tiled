// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.PlantTask = (function(superClass) {
    extend(PlantTask, superClass);

    function PlantTask() {
      return PlantTask.__super__.constructor.apply(this, arguments);
    }

    PlantTask.prototype.is_executable = function() {
      if (this.world.items[this.x][this.y]) {
        return false;
      }
      if (!this.world.find_item(this.x, this.y, this.options.material)) {
        return false;
      }
      return true;
    };

    PlantTask.prototype.execute = function() {
      var item_at_location, planted, planted_item;
      item_at_location = this.world.items[this.x][this.y];
      if (item_at_location) {
        if (!(item_at_location instanceof this.options.material)) {
          this.remove();
          return false;
        }
        planted = this.world.item_at(this).get_planted();
        planted_item = new planted(this.world, this.x, this.y);
        planted_item.grown = 0;
        this.world.add_item(planted_item);
        this.remove();
        this.world.add_task(new window.GatherTask(this.world, this.x, this.y, {
          abbr: "F"
        }));
        return false;
      }
      return new window.Fetch(this.world, this.x, this.y, this.options.material, null);
    };

    return PlantTask;

  })(window.Task);

}).call(this);

//# sourceMappingURL=plant.js.map
