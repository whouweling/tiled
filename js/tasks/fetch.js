// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.Fetch = (function(superClass) {
    extend(Fetch, superClass);

    Fetch.prototype.search_x = null;

    Fetch.prototype.search_y = null;

    Fetch.prototype.abbr = "F";

    function Fetch(world, x, y, object, in_pile) {
      Fetch.__super__.constructor.call(this, world, x, y);
      this.object = object;
      this.in_pile = in_pile;
    }

    Fetch.prototype.execute = function() {
      var item, item_at_this_location;
      if (!this.assigned.carry instanceof this.object) {
        return new window.DropTask(this.world, this.x, this.y);
      }
      if (!(this.assigned.carry instanceof this.object)) {
        item_at_this_location = this.world.items[this.assigned.x][this.assigned.y];
        if (item_at_this_location instanceof this.object && (this.in_pile === null || (this.in_pile === item_at_this_location.in_pile))) {
          this.assigned.pickup(item_at_this_location);
        } else {
          item = this.world.find_item(this.x, this.y, this.object, this.in_pile);
          if (!item) {
            this.assigned.invalidate();
            return false;
          }
          this.assigned.goto(item);
        }
        return true;
      }
      if (this.x !== this.assigned.x || this.y !== this.assigned.y) {
        this.assigned.goto(this);
        return;
      }
      this.assigned.drop();
      return false;
    };

    return Fetch;

  })(window.Task);

}).call(this);

//# sourceMappingURL=fetch.js.map
